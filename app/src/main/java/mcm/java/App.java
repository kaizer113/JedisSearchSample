/*
 * This source file was generated by the Gradle 'init' task
 */
package mcm.java;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.JedisPooled;
import redis.clients.jedis.json.Path2;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        // Redis connection example
        connectToRedis();
    }

    private static void connectToRedis() {
        // Load Redis configuration
        RedisConfig config = new RedisConfig();

        // Create a connection pool configuration
        JedisPoolConfig poolConfig = new JedisPoolConfig();
        poolConfig.setMaxTotal(config.getMaxTotal());
        poolConfig.setMaxIdle(config.getMaxIdle());
        poolConfig.setMinIdle(config.getMinIdle());
        poolConfig.setTestOnBorrow(config.getTestOnBorrow());
        poolConfig.setTestOnReturn(config.getTestOnReturn());
        poolConfig.setTestWhileIdle(config.getTestWhileIdle());

        // Create a connection pool with authentication
        try (JedisPool pool = new JedisPool(poolConfig, config.getHost(), config.getPort(),
                                          2000, config.getUsername(), config.getPassword())) {

            // Get a connection from the pool
            try (Jedis jedis = pool.getResource()) {

                // Test the connection
                System.out.println("Connected to Redis Cloud!");
                System.out.println("Redis server info: " + jedis.ping());
                System.out.println("Connected to: " + config.getHost() + ":" + config.getPort());

                // Ensure search index exists
                System.out.println("\n--- Search Index Management ---");
                boolean indexCreated = RedisSearchManager.ensureSearchIndexExists(jedis);
                if (indexCreated) {
                    System.out.println("Search index was created on startup");
                } else {
                    System.out.println("Search index already existed");
                }

                // Example operations
                System.out.println("\n--- Basic Redis Operations ---");
                jedis.set("greeting", "Hello from Redis!");
                String value = jedis.get("greeting");
                System.out.println("Retrieved from Redis: " + value);

                // Set with expiration (10 seconds)
                jedis.setex("temp_key", 10, "This will expire in 10 seconds");
                System.out.println("Set temporary key with 10 second expiration");

                // Example account data operations
                System.out.println("\n--- Account Data Example ---");
                demonstrateAccountDataOperations(config);

            } catch (Exception e) {
                System.err.println("Error executing Redis operations: " + e.getMessage());
            }

        } catch (Exception e) {
            System.err.println("Error connecting to Redis: " + e.getMessage());
            System.err.println("Make sure Redis server is accessible at " + config.getHost() + ":" + config.getPort());
        }
    }

    /**
     * Demonstrates storing and searching account data using the search index
     */
    private static void demonstrateAccountDataOperations(RedisConfig config) {
        // Create JedisPooled for JSON operations - modern pooled connection with full JSON support
        try (JedisPooled jedisPooled = new JedisPooled(config.getHost(), config.getPort(),
                                                      config.getUsername(), config.getPassword())) {
            // Create sample account data
            AccountData account1 = new AccountData(
                "CONS001", "ACC123456", "1234", "1990-01-15", "Smith",
                "WEB", "2023-06-01", "2023-07-01", "CREDIT",
                "CA", "90210", "PERSONAL", "Y", "N"
            );

            // Store accounts in Redis as JSON using proper Jedis methods
            System.out.println("Storing account data...");
            jedisPooled.jsonSet(account1.getRedisKey(), Path2.of("$"), account1.toJson());
            System.out.println("Stored 1 account record");

            // Demonstrate actual search functionality
            System.out.println("\n--- Search Examples ---");

            // Search for Smith with specific criteria
            System.out.println("Search 1: lastName:LEROY");
            performSearch(jedisPooled, "@lastName:LEROY ", "accountNumber", "consumerId");

            System.out.println("Search 2: lastName:LEROY with last4SSN:1234 @dateOfBirth:1945 11 24");
            performSearch(jedisPooled, "@lastName:LEROY @last4SSN:1234 @dateOfBirth:\"1945 11 24\"", "accountNumber", "consumerId");

            // Retrieve and display stored data using modern Jedis jsonGet API
            System.out.println("\nRetrieving stored account data:");
            // Use modern jsonGet with JedisPooled
            Object json1Obj = jedisPooled.jsonGet(account1.getRedisKey(), Path2.of("$"));

            // Handle the returned objects properly
            String json1 = handleJsonGetResult(json1Obj);

            AccountData retrieved1 = AccountData.fromJson(json1);

            System.out.println("Account 1: " + retrieved1);

        } catch (Exception e) {
            System.err.println("Error in account data operations: " + e.getMessage());
        }
    }

    /**
     * Helper method to handle jsonGet results which can return different types
     */
    private static String handleJsonGetResult(Object jsonResult) {
        if (jsonResult == null) {
            return null;
        }

        // If it's already a string, return it
        if (jsonResult instanceof String) {
            return (String) jsonResult;
        }

        // Handle JSONArray from Redis JSON operations
        if (jsonResult instanceof org.json.JSONArray) {
            org.json.JSONArray jsonArray = (org.json.JSONArray) jsonResult;
            if (jsonArray.length() > 0) {
                // Get the first element from the array
                Object firstElement = jsonArray.get(0);
                return new com.google.gson.Gson().toJson(firstElement);
            }
        }

        // If it's a list (JSONPath $ returns an array), get the first element
        if (jsonResult instanceof java.util.List) {
            java.util.List<?> list = (java.util.List<?>) jsonResult;
            if (!list.isEmpty()) {
                Object firstElement = list.get(0);
                if (firstElement instanceof String) {
                    return (String) firstElement;
                }
                // If it's a complex object, serialize it to JSON
                return new com.google.gson.Gson().toJson(firstElement);
            }
        }

        // For any other type, serialize to JSON string
        return new com.google.gson.Gson().toJson(jsonResult);
    }

    /**
     * Performs a search using jedis.ftSearch and displays results with specified return fields
     */
    private static void performSearch(JedisPooled jedis, String query, String... returnFields) {
        try {
            // Import the required classes for search
            redis.clients.jedis.search.SearchResult result = jedis.ftSearch(
                "idx:accountStr",
                query,
                redis.clients.jedis.search.FTSearchParams.searchParams()
                    .returnFields(returnFields)
            );

            System.out.println("  Query: " + query);
            System.out.println("  Total results: " + result.getTotalResults());

            if (result.getTotalResults() > 0) {
                System.out.println("  Results:");
                for (redis.clients.jedis.search.Document doc : result.getDocuments()) {
                    System.out.print("    ");
                    for (int i = 0; i < returnFields.length; i++) {
                        String field = returnFields[i];
                        Object value = doc.get(field);
                        System.out.print(field + ":" + (value != null ? value : "null"));
                        if (i < returnFields.length - 1) {
                            System.out.print(", ");
                        }
                    }
                    System.out.println(" (key: " + doc.getId() + ")");
                }
            } else {
                System.out.println("  No results found");
            }

        } catch (Exception e) {
            System.out.println("  Search error: " + e.getMessage());
        }
    }
}
